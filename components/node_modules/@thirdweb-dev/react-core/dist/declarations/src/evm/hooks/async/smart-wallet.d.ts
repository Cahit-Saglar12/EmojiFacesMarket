import type { providers } from "ethers";
import { RequiredParam } from "../../../core/query-utils/required-param";
import { UseMutationResult, UseQueryResult } from "@tanstack/react-query";
import type { SignerWithRestrictions, SignerWithRestrictionsBatchInput, SmartContract } from "@thirdweb-dev/sdk";
/** **********************/
/**       READ HOOKS    **/
/** **********************/
/**
 * Get all wallets
 *
 * @example
 * ```javascript
 * const { data: smartWallets, isLoading, error } = useSmartWalletSigners(contract);
 * ```
 *
 * @param contract - an instance of a smart wallet
 * @returns a response object that includes an array of all signers of the provided smart wallet
 * @twfeature SmartWallet
 * @see {@link https://portal.thirdweb.com/react/react.usesmartwalletsigners?utm_source=sdk | Documentation}
 * @beta
 */
export declare function useSmartWalletSigners(contract: RequiredParam<SmartContract>): UseQueryResult<SignerWithRestrictions[]>;
/** **********************/
/**     WRITE HOOKS     **/
/** **********************/
/**
 * Set the wallet's entire snapshot of permissions
 *
 * @example
 * ```jsx
 * const Component = () => {
 *   const { contract } = useContract("{{contract_address}}");
 *   const {
 *     mutate: setSmartWalletSigners,
 *     isLoading,
 *     error,
 *   } = useSetSmartWalletSigners(contract);
 *
 *   if (error) {
 *     console.error("failed to set smart wallet signers", error);
 *   }
 *
 *   return (
 *     <button
 *       disabled={isLoading}
 *       onClick={() => setSmartWalletSigners("0x...")}
 *     >
 *       Set Smart Wallet Signers
 *     </button>
 *   );
 * };
 * ```
 *
 * @param contract - an instance of a smart wallet contract
 * @returns a mutation object that can be used to set the smart wallet signers
 * @twfeature SmartWallet
 * @see {@link https://portal.thirdweb.com/react/react.usesetsmartwalletsigners?utm_source=sdk | Documentation}
 * @beta
 */
export declare function useSetSmartWalletSigners(contract: RequiredParam<SmartContract>): UseMutationResult<{
    receipt: providers.TransactionReceipt;
}, unknown, SignerWithRestrictionsBatchInput, unknown>;
//# sourceMappingURL=smart-wallet.d.ts.map